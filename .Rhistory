mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurment")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance") %>%
mutate(ImprovementScore=PostMusic-PreMusic)
View(performance_diff_d)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance") %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurment")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance") %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance") %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance") %>%
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance")
View(performance_hyp_d)
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment"))
View(performance_diff_d)
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic")))
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance")
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic")))
View(performance_diff_d)
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
spread(WithMusic, z_scored_performance)
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance")
performance_diff_d_TEST <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance")
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic")))
View(performance_diff_d_TEST)
View(performance_diff_d)
performance_diff_d <- performance_hyp_long_d %>%
select(-c("Score", "Measurment")) %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance", na.rm=T)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance",
values_drop_na = TRUE) %>%
View(performance_diff_d)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance",
values_drop_na = TRUE)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance",
values_fill = 0)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurment")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d <- performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>%
select(-c("Score", "Measurment")) %>%
pivot_wider(names_from = "WithMusic",
values_from = "z_scored_performance")
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
## your code here
hist(d$Game1Angry1)
d$DoNotUse <- replace_na(d$DoNotUse, 0)
filtered_d <- d %>%
filter(DoNotUse==0)
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
```{r}
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-starts_with("Game"))
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
hist(d$Game1Angry1)
tail(d)
unique(d$DoNotUse)
is.na(d$DoNotUse)
# your code here: exclude subjects that are marked as "DoNotUse"
d$DoNotUse <- replace_na(d$DoNotUse, 0)
filtered_d <- d %>%
filter(DoNotUse==0)
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
# your code here: remove the columns containing "Game" in the name
performance_hyp_d = filtered_d %>%
select(-starts_with("Game"))
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
hist(d$Game1Angry1)
tail(d)
unique(d$DoNotUse)
is.na(d$DoNotUse)
# your code here: exclude subjects that are marked as "DoNotUse"
d$DoNotUse <- replace_na(d$DoNotUse, 0)
filtered_d <- d %>%
filter(DoNotUse==0)
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
# your code here: remove the columns containing "Game" in the name
performance_hyp_d = filtered_d %>%
select(-starts_with("Game"))
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurment',
values_to='Value')
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurment',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurment',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
## your code here
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Rating')
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurment), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurment), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers", Measurement), ## Your code here
)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T))
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
rating_summary_d = rating_hyp_long_d %>%
## your code here
group_by(Emotion, ConfrontationalGame) %>%
summarize(MeanRating = mean(Rating, na.rm=T))
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
View(performance_hyp_d)
View(performance_hyp_d)
View(performance_hyp_long_d)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
hist(d$Game1Angry1)
tail(d)
filtered_d = d %>%
filter(!is.na(DoNotUse))
View(filtered_d)
View(filtered_d)
filtered_d = d %>%
filter(-c(!is.na(DoNotUse)))
filtered_d = d %>%
filter(!DoNotUse %in% c(is.na))
View(filtered_d)
filtered_d = d %>%
filter(!is.na(DoNotUse))
View(filtered_d)
filtered_d = d %>%
filter(drop_na(DoNotUse))
filtered_d = d %>%
filter(drop_na(DoNotUse))
filtered_d = d %>%
drop_na(DoNotUse)
View(filtered_d)
filtered_d %>% drop_na(d$DoNotUse)
filtered_d <- drop_na(d$DoNotUse)
filtered_d = d %>%
drop_na(DoNotUse)
View(filtered_d)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
hist(d$Game1Angry1)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
hist(d$Game1Angry1)
filtered_d = d %>%
drop_na(DoNotUse) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
filtered_d = d %>%
filter(!is.na(DoNotUse))
filtered_d = d %>%
filter(!is.na(DoNotUse))
filtered_d = drop_na(d, DoNotUse)
View(filtered_d)
filtered_d = d %>% drop_na('DoNotUse')
filtered_d = d %>% drop_na(DoNotUse)
filtered_d = d %>% drop_na(DoNotUse)
View(filtered_d)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
hist(d$Game1Angry1)
tail(d)
unique(d$DoNotUse)
View(d)
colnames(d)
filtered_d = d %>%
filter(DoNotUse==1)
View(filtered_d)
filtered_d = d %>%
filter(DoNotUse != 1)
View(filtered_d)
filtered_d = d %>%
filter(DoNotUse==1) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
filtered_d = d %>%
filter(DoNotUse==1, na.rm=T) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(DoNotUse==1, na.rm==T) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = d %>%
filter(DoNotUse==1, na.rm=TRUE) # your code here: exclude subjects that are marked as "DoNotUse"
View(filtered_d)
filtered_d = d %>%
filter(DoNotUse==1)
filtered_d = d %>%
filter(DoNotUse==1)
filtered_d = d %>%
filter(DoNotUse==is.na)
filtered_d = d %>%
filter(DoNotUse==1)
filtered_d = d %>%
filter(-c(DoNotUse==1))
filtered_d = d %>%
filter[-c(DoNotUse==1)]
filtered_d = d %>%
filter(DoNotUse != 1)
View(filtered_d)
d$DoNotUse <- replace_na(d$DoNotUse, 0)
filtered_d <- d %>%
filter(DoNotUse==0)
View(filtered_d)
unique(d$DoNotUse)
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
View(rating_hyp_d)
performance_hyp_d = filtered_d %>%
select(-starts_with("Game"))
View(performance_hyp_d)
View(filtered_d)
colnames(filtered_d)
View(performance_hyp_d)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
hist(d$Game1Angry1)
tail(d)
d$DoNotUse <- replace_na(d$DoNotUse, 0)
filtered_d <- d %>%
filter(DoNotUse==0) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-contains("Game"))
View(performance_hyp_d)
View(performance_hyp_d)
View(rating_hyp_d)
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
colnames(rating_hyp_d)
colnames(performance_hyp_d)
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
colnames(rating_hyp_d)
rating_hyp_long_d = rating_hyp_d %>%
## your code here
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Rating')
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
colnames(rating_hyp_long_d)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers", Measurement), ## Your code here
)
View(rating_hyp_d)
View(rating_hyp_long_d)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
View(rating_hyp_long_d)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T))
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
View(performance_hyp_long_d)
rating_summary_d = rating_hyp_long_d %>%
## your code here
group_by(Emotion, ConfrontationalGame) %>%
summarize(MeanRating = mean(Rating, na.rm=T))
View(rating_summary_d)
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
View(performance_diff_d)
performance_diff_d
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(MusicCondition, ConfrontationGame) %>%
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T))
performance_diff_summary_d = performance_diff_d %>%
## Your code here
group_by(MusicCondition, ConfrontationalGame) %>%
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T))
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_model = lm(ImprovementScore ~ ConfrontationalGame * MusicCondition, performance_diff_d)
summary(performance_model)
